import * as Types from '../constants/QuestionnairesActionTypes'
import { createAction } from 'redux-actions'

export const addQuestionnaire = createAction(Types.ADD_QUESTIONNAIRE)
export const removeQuestionnaire = createAction(Types.REMOVE_QUESTIONNAIRE, questionnaire => questionnaire)
export const editQuestionnaire = createAction(Types.EDIT_QUESTIONNAIRE, questionnaire => questionnaire)
export const addQuestion = createAction(Types.ADD_QUESTION, type => type)
export const removeQuestion = createAction(Types.REMOVE_QUESTION, question => question)
export const reuseQuestion = createAction(Types.REUSE_QUESTION, question => question)
export const shiftQuestion = createAction(Types.SHIFT_QUESTION, (question, direction) => ({question, direction}))
export const toggleRequirement = createAction(Types.TOGGLE_REQUIREMENT, question => question)
export const addOption = createAction(Types.ADD_OPTION, question => question)
export const removeOption = createAction(Types.REMOVE_OPTION, (question, option) => ({question, option}))
export const saveText = createAction(Types.SAVE_TEXT, (question, option, newText) => ({ question, option, newText}))
export const saveQuestionnaire = createAction(Types.SAVE_QUESTIONNAIRE, (id, selectedDay) => ({id, selectedDay}))
export const releaseQuestionnaire = createAction(Types.RELEASE_QUESTIONNAIRE, id => id)
export const fillQuestionnaire = createAction(Types.FILL_QUESTIONNAIRE, id => id)
export const chooseOption = createAction(Types.CHOOSE_OPTION, (question, option) => ({question, option}))
export const toggleOption = createAction(Types.TOGGLE_OPTION, (question, option) => ({question, option}))
export const fillText = createAction(Types.FILL_TEXT, (text, question) => ({text, question}))
export const submitQuestionnaire = createAction(Types.SUBMIT_QUESTIONNAIRE)
export const checkData = createAction(Types.CHECK_DATA, id => id)
export const closeQuestionnaire = createAction(Types.CLOSE_QUESTIONNAIRE, id => id)
export const sortQuestionnaire = createAction(Types.SORT_QUESTIONNAIRE, dataKey => dataKey)
